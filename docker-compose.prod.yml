version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: pls-postgres-prod
    environment:
      POSTGRES_DB: pls_backend
      POSTGRES_USER: ${POSTGRES_USER:-ssingh83}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ssingh83} -d pls_backend"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: docker/dockerfile
    container_name: pls-backend-prod
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ssingh83}:${POSTGRES_PASSWORD:-password}@postgres:5432/pls_backend
      - PORT=4000
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST_EMAIL=${SMTP_HOST_EMAIL}
      - SMTP_SECRET=${SMTP_SECRET}
      - CLOUDINARY_NAME=${CLOUDINARY_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - WHITE_LIST_MAILS=${WHITE_LIST_MAILS}
      - ALLOWED_ORIGIN=${ALLOWED_ORIGIN}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: pls-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: always
    networks:
      - app-network

volumes:
  postgres_prod_data:

networks:
  app-network:
    driver: bridge
